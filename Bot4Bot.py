import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import datetime

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '123456789'))  # –í .env –∑–∞–¥–∞—Ç—å BOT_TOKEN –∏ ADMIN_ID

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –í—Å–µ —Ç–µ–∫—Å—Ç—ã –±–ª–æ–∫–æ–≤ –∏ —É—Å–ª—É–≥ –≤—ã–Ω–µ—Å–µ–Ω—ã —Å—é–¥–∞ ---
ABOUT_TEXT = "ü§ñ –û –∫–æ–º–ø–∞–Ω–∏–∏\n\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤–∞—à–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤. (–¢–µ–∫—Å—Ç –ª–µ–≥–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–¥–µ—Å—å)"
SERVICES_TEXT = "üõ†Ô∏è –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–∫–∞–∑–∞."
ADVANTAGE_TEXT = "üî• –í–∞—à–∞ –≤—ã–≥–æ–¥–∞\n\n–£–¢–ü –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞/—Å–µ—Ä–≤–∏—Å–∞."
CONTACTS_TEXT = "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥.1\n–¢–µ–ª: +7 900 123-45-67\n@your_support"

# --- –û–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ ---
SERVICE_LIST = [
    {
        "name": "–ë–æ—Ç + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é",
        "price": "3000 —Ä—É–±.",
        "desc": "–ì–æ—Ç–æ–≤—ã–π –±–æ—Ç + –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é.",
        "cb": "order_bot"
    },
    {
        "name": "–†–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±–æ—Ç–∞",
        "price": "5000 —Ä—É–±.",
        "desc": "–í—Å—ë —Å–¥–µ–ª–∞–µ–º –∑–∞ –≤–∞—Å –ø–æ–¥ –∫–ª—é—á.",
        "cb": "order_setup"
    },
    {
        "name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ (—Ä–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + –ø–æ–¥–¥–µ—Ä–∂–∫–∞)",
        "price": "5000 —Ä—É–±. + 1000 —Ä—É–±/–º–µ—Å.",
        "desc": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å 1 –ø—Ä–∞–≤–∫–æ–π –≤ –º–µ—Å—è—Ü.",
        "cb": "order_sub"
    },
]

# --- FSM –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —É—Å–ª—É–≥–∏ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ---
class OrderForm(StatesGroup):
    waiting_for_phone = State()

class ConsultForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_date = State()
    waiting_for_time = State()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫) ---
def main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="consult")],
        [InlineKeyboardButton(text="–í–∞—à–∞ –≤—ã–≥–æ–¥–∞", callback_data="advantage")],
        [InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ])
    return kb

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu())

@dp.callback_query(F.data == "about")
async def about_handler(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(ABOUT_TEXT, reply_markup=main_menu())
    await call.answer()

@dp.callback_query(F.data == "services")
async def services_handler(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{s['name']} ‚Äî {s['price']}", callback_data=s["cb"]
            )] for s in SERVICE_LIST
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]
    )
    await call.message.answer(SERVICES_TEXT, reply_markup=kb)
    await call.answer()

# --- –ó–∞–∫–∞–∑ –ª—é–±–æ–π —É—Å–ª—É–≥–∏ (—á–µ—Ä–µ–∑ 1 —Ñ–æ—Ä–º—É, —É–∑–Ω–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω) ---
@dp.callback_query(lambda c: c.data.startswith("order_"))
async def order_service_start(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    service = next((s for s in SERVICE_LIST if s["cb"] == call.data), None)
    if not service:
        await call.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(service_name=service['name'])
    await call.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{service['name']}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {service['price']}\n\n"
        "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∑–∞–¥–∞—á—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º):\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        parse_mode="HTML"
    )
    await state.set_state(OrderForm.waiting_for_phone)
    await call.answer()

@dp.message(OrderForm.waiting_for_phone)
async def order_get_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    data = await state.get_data()
    msg = (
        f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É</b>\n"
        f"–£—Å–ª—É–≥–∞: {data.get('service_name','')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–û—Ç: {message.from_user.first_name} (@{message.from_user.username or '–Ω–µ—Ç username'})"
    )
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu())
    await bot.send_message(ADMIN_ID, msg, parse_mode="HTML")
    await state.clear()

# --- –ë–ª–æ–∫ "–í–∞—à–∞ –≤—ã–≥–æ–¥–∞" ---
@dp.callback_query(F.data == "advantage")
async def advantage_handler(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(ADVANTAGE_TEXT, reply_markup=main_menu())
    await call.answer()

# --- –ö–æ–Ω—Ç–∞–∫—Ç—ã ---
@dp.callback_query(F.data == "contacts")
async def contacts_handler(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(CONTACTS_TEXT, reply_markup=main_menu())
    await call.answer()

# --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π) –∏ –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ---
@dp.callback_query(F.data == "consult")
async def consult_start(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(ConsultForm.waiting_for_name)
    await call.answer()

@dp.message(ConsultForm.waiting_for_name)
async def consult_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(ConsultForm.waiting_for_phone)

@dp.message(ConsultForm.waiting_for_phone)
async def consult_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(ConsultForm.waiting_for_date)

@dp.message(ConsultForm.waiting_for_date)
async def consult_date(message: types.Message, state: FSMContext):
    try:
        date = datetime.datetime.strptime(message.text.strip(), "%d.%m.%Y")
        if date.date() < datetime.date.today():
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.07.2025):")
        return
    await state.update_data(date=message.text.strip())
    # –ß–∞—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{h}:00", callback_data=f"consult_time_{h}")]
            for h in range(10, 20)
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)
    await state.set_state(ConsultForm.waiting_for_time)

@dp.callback_query(lambda c: c.data.startswith("consult_time_"), ConsultForm.waiting_for_time)
async def consult_time(call: types.CallbackQuery, state: FSMContext):
    time_str = call.data.split("_")[-1] + ":00"
    await state.update_data(time=time_str)
    data = await state.get_data()
    msg = (
        f"üóìÔ∏è <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–î–∞—Ç–∞: {data['date']} {time_str}\n"
        f"–û—Ç: @{call.from_user.username or '–Ω–µ—Ç username'}"
    )
    await call.message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n{data['date']} –≤ {time_str}.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=main_menu()
    )
    await bot.send_message(ADMIN_ID, msg, parse_mode="HTML")
    await state.clear()
    await call.answer()

# --- –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.callback_query(F.data == "start")
async def cb_start(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await call.answer()

# --- Fallback –Ω–∞ –ª—é–±–æ–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu())

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

# ------------------------------------------
#  –ü–û–Ø–°–ù–ï–ù–ò–Ø:
# - –¢–µ–∫—Å—Ç—ã –¥–ª—è –±–ª–æ–∫–æ–≤ (–æ –∫–æ–º–ø–∞–Ω–∏–∏, —É—Å–ª—É–≥–∏, –≤—ã–≥–æ–¥—ã –∏ —Ç.–¥.) –ª–µ–≥–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞.
# - –õ—é–±—É—é —É—Å–ª—É–≥—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ SERVICE_LIST.
# - FSM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ–æ—Ä–º ‚Äî –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –ø–æ–ª—è.
# - –í—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å, –¥–∞—Ç–∞ —Ä—É–∫–∞–º–∏ (—ç—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É).
# - –í—Å–µ –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ ADMIN_ID.
# - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ.
# ------------------------------------------
